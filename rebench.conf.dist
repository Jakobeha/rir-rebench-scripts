# Config file for ReBench
# Config format is YAML (see http://yaml.org/ for detailed spec)

# this run definition will be choosen if no parameters are given to rebench.py
default_experiment: all
default_data_file: 'benchmarks.data'

runs:
    invocations: 1
    warmup: 4
    iterations: 15
    min_iteration_time: 10

.locations:
    awf: &LOCATION_AWF "/home/oli/rbenchmarking/Benchmarks/areWeFast"
    sht: &LOCATION_SHT "/home/oli/rbenchmarking/Benchmarks/shootout"
    rir: &LOCATION_RIR "/home/oli/rir/build/release/bin"
    # gnu: &LOCATION_GNU "/home/oli/rir/external/vanilla-r/bin"
    # rir: &LOCATION_RIR_BASELINE "/home/oli/rir_master/build/release/bin"


benchmark_suites:
    are-we-fast-r:
        gauge_adapter: RebenchLog
        location: *LOCATION_AWF
        command: &R_BENCH_COMMAND " harness.r %(benchmark)s %(iterations)s "
        max_invocation_time: 6000
        benchmarks:
#            - Mandelbrot:
#                extra_args: 1
#                codespeed_name: "[awf] mandel"
            - Bounce:
                extra_args: 3
                codespeed_name: "[awf] bounce"
            - Storage:
                extra_args: 20
                codespeed_name: "[awf] store"

    shootout:
        gauge_adapter: RebenchLog
        location: *LOCATION_SHT
        command: *R_BENCH_COMMAND
        max_invocation_time: 6000
        benchmarks:  # extra_args: benchmarkParameter [innerIterations]
            - binarytrees:
                command: binarytrees/binarytrees
                extra_args: 9
                codespeed_name: "[shoot] bintree"
            - binarytrees_2:
                command: binarytrees/binarytrees_2
                extra_args: 9
                codespeed_name: "[shoot] bintree2"
            - binarytrees_naive:
                command: binarytrees/binarytrees_naive
                extra_args: 9
                codespeed_name: "[shoot] bintree_n"
            - fannkuchredux:
                command: fannkuch/fannkuchredux
                extra_args: 7
                codespeed_name: "[shoot] fannk"
            - fannkuchredux_naive:
                command: fannkuch/fannkuchredux_naive
                extra_args: 7
                codespeed_name: "[shoot] fannk_n"
            - fasta:
                command: fasta/fasta
                extra_args: 10000
                codespeed_name: "[shoot] fasta"
            - fasta_2:
                command: fasta/fasta_2
                extra_args: 10000
                codespeed_name: "[shoot] fasta2"
            - fasta_3:
                command: fasta/fasta_3
                extra_args: 10000
                codespeed_name: "[shoot] fasta3"
            - fasta_naive:
                command: fasta/fasta_naive
                extra_args: 10000
                codespeed_name: "[shoot] fasta_n"
            - fasta_naive_2:
                command: fasta/fasta_naive_2
                extra_args: 2000
                codespeed_name: "[shoot] fasta_n2"
            - fastaredux:
                command: fastaredux/fastaredux
                extra_args: 10000
                codespeed_name: "[shoot] fastar"
            - fastaredux_naive:
                command: fastaredux/fastaredux_naive
                extra_args: 10000
                codespeed_name: "[shoot] fastar_n"
            - knucleotide:
                command: knucleotide/knucleotide
                extra_args: 1000
                codespeed_name: "[shoot] knucleo"
            - knucleotide_brute:
                command: knucleotide/knucleotide_brute
                extra_args: 1000
                codespeed_name: "[shoot] knucleo_b"
            - knucleotide_brute_2:
                command: knucleotide/knucleotide_brute_2
                extra_args: 1000
                codespeed_name: "[shoot] knucleo_b2"
            - knucleotide_brute_3:
                command: knucleotide/knucleotide_brute_3
                extra_args: 1000
                codespeed_name: "[shoot] knucleo_b3"
            - mandelbrot_ascii:
                command: mandelbrot/mandelbrot_ascii
                extra_args: 500
                codespeed_name: "[shoot] mandel_a"
# turn off for now since they write binary data to stdout...
#            - mandelbrot:
#                command: mandelbrot/mandelbrot
#                extra_args: 2000
#                codespeed_name: "[shoot] mandel"
#            - mandelbrot_naive:
#                command: mandelbrot/mandelbrot_naive
#                extra_args: 200
#                codespeed_name: "[shoot] mandel_n"
            - mandelbrot_naive_ascii:
                command: mandelbrot/mandelbrot_naive_ascii
                extra_args: 80
                codespeed_name: "[shoot] mandel_n_a"
            - mandelbrot_noout:
                command: mandelbrot/mandelbrot_noout
                extra_args: 500
                codespeed_name: "[shoot] mandel_no"
            - mandelbrot_noout_naive:
                command: mandelbrot/mandelbrot_noout_naive
                extra_args: 300
                codespeed_name: "[shoot] mandel_no_n"
            - nbody:
                command: nbody/nbody
                extra_args: 1000
                codespeed_name: "[shoot] nbody"
            - nbody_2:
                command: nbody/nbody_2
                extra_args: 500
                codespeed_name: "[shoot] nbody2"
            - nbody_3:
                command: nbody/nbody_3
                extra_args: 500
                codespeed_name: "[shoot] nbody3"
            - nbody_naive:
                command: nbody/nbody_naive
                extra_args: 2000
                codespeed_name: "[shoot] nbody_n"
            - nbody_naive_2:
                command: nbody/nbody_naive_2
                extra_args: 200
                codespeed_name: "[shoot] nbody_n2"
            - pidigits:
                command: pidigits/pidigits
                extra_args: 40
                codespeed_name: "[shoot] pidig"
            - regexdna:
                command: regexdna/regexdna
                extra_args: 10000
                codespeed_name: "[shoot] regex"
            - reversecomplement:
                command: reversecomplement/reversecomplement
                extra_args: 10000
                codespeed_name: "[shoot] revcom"
            - reversecomplement_2:
                command: reversecomplement/reversecomplement_2
                extra_args: 10000
                codespeed_name: "[shoot] revcom2"
            - reversecomplement_naive:
                command: reversecomplement/reversecomplement_naive
                extra_args: 10000
                codespeed_name: "[shoot] revcom_n"
            - spectralnorm:
                command: spectralnorm/spectralnorm
                extra_args: 200
                codespeed_name: "[shoot] specnorm"
            - spectralnorm_alt:
                command: spectralnorm/spectralnorm_alt
                extra_args: 600
                codespeed_name: "[shoot] specnorm_a"
            - spectralnorm_alt_2:
                command: spectralnorm/spectralnorm_alt_2
                extra_args: 200
                codespeed_name: "[shoot] specnorm_a2"
            - spectralnorm_alt_3:
                command: spectralnorm/spectralnorm_alt_3
                extra_args: 50
                codespeed_name: "[shoot] specnorm_a3"
            - spectralnorm_alt_4:
                command: spectralnorm/spectralnorm_alt_4
                extra_args: 50
                codespeed_name: "[shoot] specnorm_a4"
            - spectralnorm_math:
                command: spectralnorm/spectralnorm_math
                extra_args: 300
                codespeed_name: "[shoot] specnorm_m"
            - spectralnorm_naive:
                command: spectralnorm/spectralnorm_naive
                extra_args: 40
                codespeed_name: "[shoot] specnorm_n"


# VMs have a name and are specified by a path and the binary to be executed
executors:
#     GNU-R:
#         path: *LOCATION_GNU
#         executable: &R_VM_CMD "Rscript"
#         args: ""
#     PIR_BASELINE:
#         path: *LOCATION_RIR_BASELINE
#         executable: *R_VM_CMD
#         args: ""
    PIR:
        path: *LOCATION_RIR
        executable: "Rscript"
        args: ""

# define the benchmarks to be executed for a re-executable benchmark run
experiments:
    AreWeFast:
        executions:
#          - RIR:
#              suites:
#                - are-we-fast-r
#                - shootout
#          - PIR_BASELINE:
#              suites:
#                - are-we-fast-r
#                - shootout
          - PIR:
              suites:
                - are-we-fast-r
                - shootout
#          - GNU-R:
#              suites:
#                - are-we-fast-r
#                - shootout
